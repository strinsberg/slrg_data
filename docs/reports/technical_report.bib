@phdthesis{Naz2015,
author = {Naz, Fariha},
title = {{DO SOCIOLINGUISTIC VARIATIONS EXIST IN PROGRAMMING?}},
type = {Thesis},
year = {2015}
}


@phdthesis{Rafee2017,
author = {Rafee, Mahmudul Hasan},
school = {University of Lethbridge},
title = {{COMPUTER PROGRAM CATEGORIZATION WITH MACHINE LEARNING}},
type = {Thesis},
year = {2017}
}


@article{Santamaria2018,
abstract = {{\textless}p{\textgreater}The increased interest in analyzing and explaining gender inequalities in tech, media, and academia highlights the need for accurate inference methods to predict a person's gender from their name. Several such services exist that provide access to large databases of names, often enriched with information from social media profiles, culture-specific rules, and insights from sociolinguistics. We compare and benchmark five name-to-gender inference services by applying them to the classification of a test data set consisting of 7,076 manually labeled names. The compiled names are analyzed and characterized according to their geographical and cultural origin. We define a series of performance metrics to quantify various types of classification errors, and define a parameter tuning procedure to search for optimal values of the services' free parameters. Finally, we perform benchmarks of all services under study regarding several scenarios where a particular metric is to be optimized.{\textless}/p{\textgreater}},
author = {Santamar{\'{i}}a, Luc{\'{i}}a and Mihaljevi{\'{c}}, Helena},
doi = {10.7717/peerj-cs.156},
file = {:home/strinsberg/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Santamar{\'{i}}a, Mihaljevi{\'{c}} - 2018 - Comparison and benchmark of name-to-gender inference services.pdf:pdf},
issn = {2376-5992},
journal = {PeerJ Computer Science},
mendeley-groups = {Work},
month = {jul},
pages = {e156},
title = {{Comparison and benchmark of name-to-gender inference services}},
url = {https://peerj.com/articles/cs-156},
volume = {4},
year = {2018}
}


@article{Wisse2015,
abstract = {The attribution of authorship is required in diverse applications, ranging from ancient novels (Shakespeare's work, Federalist papers) for historical interest to recent novels for linguistic research or even out of curiosity (Robert Galbraith alias J.K.Rowling). For this problem extensive research has resulted in effective general purpose methods. Also, for other types of text the original author needs to be discovered. Especially, we are interested in methods to identify JavaScript programmers, which can be used to reveal the offender who produced malicious software on a website. So far, for this hardly studied problem, mainly general purpose methods from natural language authorship attribution have been applied. Moreover, no suitable reference dataset is available to allow for method evaluation and method development in a supervised machine learning approach. In this work we first obtain a reference dataset of substantial size and quality. Further, we propose to extract structural features from the Abstract Syntax Tree (AST) to describe the coding style of an author. In the experiments, we show that the specifically designed features indeed improve the authorship attribution of scripting code to programmers, especially in addition to character n-gram features.},
author = {Wisse, Wilco and Veenman, Cor},
doi = {10.1016/j.diin.2015.09.001},
file = {:home/strinsberg/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Wisse, Veenman - 2015 - Scripting DNA Identifying the JavaScript programmer.pdf:pdf},
issn = {17422876},
journal = {Digital Investigation},
keywords = {Abstract Syntax Tree,Authorship identification,Authorship verification,JavaScript,Source code,Syntactic features},
mendeley-groups = {Work},
month = {dec},
pages = {61--71},
publisher = {Elsevier Ltd},
title = {{Scripting DNA: Identifying the JavaScript programmer}},
volume = {15},
year = {2015}
}

@article{Yang2017,
abstract = {Authorship attribution is to identify the most likely author of a given sample among a set of candidate known authors. It can be not only applied to discover the original author of plain text, such as novels, blogs, emails, posts etc., but also used to identify source code programmers. Authorship attribution of source code is required in diverse applications, ranging from malicious code tracking to solving authorship dispute or software plagiarism detection. This paper aims to propose a new method to identify the programmer of Java source code samples with a higher accuracy. To this end, it first introduces back propagation (BP) neural network based on particle swarm optimization (PSO) into authorship attribution of source code. It begins by computing a set of defined feature metrics, including lexical and layout metrics, structure and syntax metrics, totally 19 dimensions. Then these metrics are input to neural network for supervised learning, the weights of which are output by PSO and BP hybrid algorithm. The effectiveness of the proposed method is evaluated on a collected dataset with 3,022 Java files belong to 40 authors. Experiment results show that the proposed method achieves 91.060{\%} accuracy. And a comparison with previous work on authorship attribution of source code for Java language illustrates that this proposed method outperforms others overall, also with an acceptable overhead.},
author = {Yang, Xinyu and Xu, Guoai and Li, Qi and Guo, Yanhui and Zhang, Miao},
doi = {10.1371/journal.pone.0187204},
file = {:home/strinsberg/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Yang et al. - 2017 - Authorship attribution of source code by using back propagation neural network based on particle swarm optimization.pdf:pdf},
issn = {19326203},
journal = {PLoS ONE},
mendeley-groups = {Work},
month = {nov},
number = {11},
publisher = {Public Library of Science},
title = {{Authorship attribution of source code by using back propagation neural network based on particle swarm optimization}},
volume = {12},
year = {2017}
}

@inproceedings{Matyukhina2019,
author = {Matyukhina, Alina and Stakhanova, Natalia and {Dalla Preda}, Mila and Perley, Celine},
doi = {10.1145/3292006.3300032},
file = {:home/strinsberg/.local/share/data/Mendeley Ltd./Mendeley Desktop/Downloaded/Matyukhina et al. - 2019 - Adversarial Authorship Attribution in Open-Source Projects.pdf:pdf},
mendeley-groups = {Work},
month = {mar},
pages = {291--302},
publisher = {Association for Computing Machinery (ACM)},
title = {{Adversarial Authorship Attribution in Open-Source Projects}},
year = {2019}
}


@MISC{WEBSITE:Git1,
	HOWPUBLISHED = "https://GitHub.com/about",
	AUTHOR = "GitHub",
	TITLE = "GitHub About",
	YEAR = "2019",
	NOTE = "Accessed on 2019-22-07"
}


@MISC{WEBSITE:CF1,
	HOWPUBLISHED = "https://codeforces.com/help",
	AUTHOR = "Mike Mirzayanov",
	TITLE = "Frequently Asked Questions",
	YEAR = "2011",
	NOTE = "Accessed on 2019-25-07"
}

@MISC{WEBSITE:GENDER1,
	HOWPUBLISHED = "https://genderize.io/",
	AUTHOR = "genderiz.io",
	TITLE = "Home Page",
	YEAR = "2019",
	NOTE = "Accessed on 2019-25-07"
}


@inproceedings{Gousi13,
  author = {Gousios, Georgios},
  title = {The GHTorrent dataset and tool suite},
  booktitle = {Proceedings of the 10th Working Conference on Mining Software
    Repositories},
  series = {MSR '13},
  year = {2013},
  isbn = {978-1-4673-2936-1},
  location = {San Francisco, CA, USA},
  pages = {233--236},
  numpages = {4},
  url = {http://dl.acm.org/citation.cfm?id=2487085.2487132},
  acmid = {2487132},
  publisher = {IEEE Press},
  address = {Piscataway, NJ, USA},
}